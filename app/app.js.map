{"version":3,"sources":["../src/app.js"],"names":["app","use","join","__dirname","map","html","extension","engine","template","ctx","next","start","Date","ms","console","log","method","url","require","routes","status","render","on","err","port","parseInt","env","NODE_PORT","server","createServer","callback","listen","error","syscall","code","process","exit"],"mappings":"2UAAA,4B;AACA,4B;AACA,0B;;;AAGA,+C;AACA,qC;AACA,yC;AACA,uC;AACA,uC;;AAEA,yC;;;AAGA,mC;AACA,qC;;AAEA,kC;AACA,kC,6IANA;AACA;AALsC;AAFP;AAJR;AACvB;AACA;AAgBA,IAAMA,MAAM,mBAAZ,C,CAEA;AAbiC;AAFE;AAgBnCA,IAAIC,GAAJ,CAAQ,0BAAR,EACAD,IAAIC,GAAJ,CAAQ,8BAAR,EACAD,IAAIC,GAAJ,CAAQ,0BAAQ,wBAAR,CAAR,E,CAEA;AACAD,IAAIC,GAAJ,CAAQ,yBAAY,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAZ,CAAR;AAEA;AACAH,IAAIC,GAAJ,CAAQ,wBAAM,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAN,EAAwC;AAC/CC,MAAK;AACJC,QAAM,UADF,EAD0C;;AAI/CC,YAAW,MAJoC,EAAxC,CAAR;;;AAOA;AACAN,IAAIC,GAAJ,CAAQ,0BAAQ,eAAKC,IAAL,CAAUC,SAAV,EAAqB,uBAArB,CAAR,CAAR;;AAEA;AACAH,IAAIC,GAAJ,CAAQ,0BAAQ,wBAAM;AACrBM,SAAQ,UADa;AAErBC,WAAU,eAAKN,IAAL,CAAUC,SAAV,EAAqB,mBAArB,CAFW,EAAN,CAAR,CAAR;;;AAKA;AACAH,IAAIC,GAAJ,oFAAQ,iBAAOQ,GAAP,EAAYC,IAAZ;AACDC,WADC,GACO,IAAIC,IAAJ,EADP;AAEDF,aAFC;AAGDG,QAHC,GAGI,IAAID,IAAJ,KAAaD,KAHjB;AAIPG,cAAQC,GAAR,CAAeN,IAAIO,MAAnB,SAA6BP,IAAIQ,GAAjC,WAA0CJ,EAA1C,SAJO,mEAAR;;;AAOA;AACA;AACAb,IAAIC,GAAJ,qFAAQ,kBAAOQ,GAAP,EAAYC,IAAZ;AACDQ,eAAQ,UAAR,EAAoBC,MAApB,GAA6BV,GAA7B,EAAkCC,IAAlC,CADC,uEAAR;;;AAIA;AACAV,IAAIC,GAAJ,qFAAQ,kBAAOQ,GAAP;AACPA,UAAIW,MAAJ,GAAa,GAAb,CADO;AAEDX,WAAIY,MAAJ,CAAW,KAAX,CAFC,uEAAR;;;AAKA;AACArB,IAAIsB,EAAJ,CAAO,OAAP,EAAgB,UAACC,GAAD,EAAMd,GAAN,EAAc;AAC7BK,SAAQC,GAAR,CAAY,iBAAZ,EAA+BQ,GAA/B;AACA,CAFD;;;AAKA;AACA,IAAMC,OAAOC,SAASzB,IAAI0B,GAAJ,CAAQC,SAAR,IAAqB,iBAAOH,IAA5B,IAAoC,MAA7C,CAAb;AACA,IAAMI,SAAS,eAAKC,YAAL,CAAkB7B,IAAI8B,QAAJ,EAAlB,CAAf;;AAEAF,OAAOG,MAAP,CAAcP,IAAd;AACAI,OAAON,EAAP,CAAU,OAAV,EAAmB,UAACU,KAAD,EAAW;AAC7B,KAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC/B,QAAMD,KAAN;AACA;AACD;AACA,SAAQA,MAAME,IAAd;AACC,OAAK,QAAL;AACCpB,WAAQC,GAAR,CAAYS,OAAO,+BAAnB;AACAW,WAAQC,IAAR,CAAa,CAAb;AACA;AACD,OAAK,YAAL;AACCtB,WAAQC,GAAR,CAAYS,OAAO,oBAAnB;AACAW,WAAQC,IAAR,CAAa,CAAb;AACA;AACD;AACC,SAAMJ,KAAN,CAVF;;AAYA,CAjBD;AAkBAJ,OAAON,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC5BR,SAAQC,GAAR,CAAY,uBAAZ,EAAqCS,IAArC;AACA,CAFD,E;;AAIexB,G","file":"app.js","sourcesContent":["import http from 'http';\r\nimport path from 'path';\r\nimport Koa from 'koa'; // koa@2\r\n// a request body parser for koa, base on co-body, support json, from and text type body.\r\n// koa-bodyparser@3 support koa@2\r\nimport bodyParser from 'koa-bodyparser'; \r\nimport views from 'koa-views'; // master\r\nimport favicon from 'koa-favicon'; // @2\r\nimport serveStatic from 'koa-static'; // master\r\nimport logger from 'koa-logger'; // @2\r\n\r\nimport convert from 'koa-convert';\r\n// need convert\r\n// pretty-printed JSON response middleware\r\nimport json from 'koa-json';\r\nimport error from 'koa-error';\r\n\r\nimport router from './routes';\r\nimport config from './config';\r\n\r\nconst app = new Koa();\r\n\r\n// middleware\r\napp.use(logger());\r\napp.use(bodyParser());\r\napp.use(convert(json()));\r\n\r\n// static\r\napp.use(serveStatic(path.join(__dirname, '../public')));\r\n\r\n// view\r\napp.use(views(path.join(__dirname, '../views'), {\r\n\tmap: {\r\n\t\thtml: 'nunjucks'\r\n\t},\r\n\textension: 'html'\r\n}));\r\n\r\n// favicon\r\napp.use(favicon(path.join(__dirname, '../public/favicon.ico')));\r\n\r\n// 500 error\r\napp.use(convert(error({\r\n\tengine: 'nunjucks',\r\n\ttemplate: path.join(__dirname, '../views/500.html')\r\n})));\r\n\r\n// logger\r\napp.use(async (ctx, next) => {\r\n\tconst start = new Date();\r\n\tawait next();\r\n\tconst ms = new Date() - start;\r\n\tconsole.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\r\n});\r\n\r\n// response router\r\n// app.use(router.routes());\r\napp.use(async (ctx, next) => {\r\n\tawait require('./routes').routes()(ctx, next);\r\n});\r\n\r\n// 404\r\napp.use(async (ctx) => {\r\n\tctx.status = 404;\r\n\tawait ctx.render('404');\r\n});\r\n\r\n// error logger\r\napp.on('error', (err, ctx) => {\r\n\tconsole.log('error occured: ', err);\r\n});\r\n\r\n\r\n// create server\r\nconst port = parseInt(app.env.NODE_PORT || config.port || '1991');\r\nconst server = http.createServer(app.callback());\r\n\r\nserver.listen(port);\r\nserver.on('error', (error) => {\r\n\tif (error.syscall !== 'listen') {\r\n\t\tthrow error;\r\n\t}\r\n\t// handler specific listen errors with friendly message\r\n\tswitch (error.code) {\r\n\t\tcase 'EACCES':\r\n\t\t\tconsole.log(port + ' requires elevated privileges');\r\n\t\t\tprocess.exit(1);\r\n\t\t\tbreak;\r\n\t\tcase 'EADDRINUSE':\r\n\t\t\tconsole.log(port + ' is already in use');\r\n\t\t\tprocess.exit(1);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow error;\r\n\t}\r\n});\r\nserver.on('listening', () => {\r\n\tconsole.log('Listining on port: %d', port);\r\n});\r\n\r\nexport default app;\r\n"]}